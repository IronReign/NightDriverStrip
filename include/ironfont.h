#include "globals.h" 

//Mahesh made this 4x6 font in fontstruct
const uint8_t IronFontBitmaps[] PROGMEM = {
0x69,0x99,0x96, // 0
0xe2,0x22,0x2f, // 1
0xf1,0xf8,0x8f, // 2
0xf1,0xf1,0x1f, // 3
0x99,0xf1,0x11, // 4
0xf8,0xe1,0x1e, // 5
0xf8,0x8f,0x9f, // 6
0xf1,0x11,0x11, // 7
0xf9,0x9f,0x9f, // 8
0xf9,0x9f,0x11, // 9
0x69,0x9f,0x99, // A
0xf9,0xe9,0x9f, // B
0xf8,0x88,0x8f, // C
0xe9,0x99,0x9e, // D
0xf8,0xf8,0x8f, // E
0xf8,0xf8,0x88, // F
0xf8,0x8b,0x9f, // G
0x99,0xff,0x99, // H
0xf6,0x66,0x6f, // I
0xf2,0x22,0xae, // J
0x9a,0xcc,0xa9, // K
0x88,0x88,0x8f, // L
0x9f,0x99,0x99, // M
0x9d,0xfb,0x99, // N
0xf9,0x99,0x9f, // O
0xf9,0xf8,0x88, // P
0xf9,0x99,0xe1, // Q
0xf9,0x9f,0xa9, // R
0xf8,0xc3,0x1f, // S
0xf6,0x66,0x66, // T
0x99,0x99,0x9f, // U
0x99,0x99,0x66, // V
0x99,0x9f,0xf9, // W
0x9f,0x66,0xf9, // X
0x9f,0x66,0x66, // Y
0xf3,0x66,0xcf, // Z
0x00,0x00,0x00  // space - default unsupported glyph
};

int rowsPerChar = 6;
int columnsPerChar = 4;

int bitsPerChar = rowsPerChar*columnsPerChar; 
int bytesPerChar = bitsPerChar/8;
int rowsPerByte = 2; 

int getPixels(char c){
    int pixies;
    int i;

    //convert from the ascii ordinals baked into C to the encoding Mahesh provided
    //todo - would be better to re-encode array into ascii format
    if (isdigit(c)) i = c - 48;
    else i = c-55;
    //i=0; //test - force to a specific char in the font array

    pixies = (IronFontBitmaps[i*bytesPerChar]<<16) +
            (IronFontBitmaps[i*bytesPerChar+1]<<8) +
            (IronFontBitmaps[i*bytesPerChar+2]);
    
    return pixies;

}

bool getPix(char c, int y, int x)
{
    if (isalpha(c)) c = toupper(c);
    else if(isdigit(c)) ;//do nothing
    else c='['; //force everyting else to read as the last glyph
    int pixies = getPixels(c);
    //pixies =  5592405; //test - 24 bits of 01 repeated
    //pixies = 6922137; //test - A
    int n=y*columnsPerChar+x;

    /* Right shift num, n times and perform bitwise AND with 1 */
    bool bitStatus = (pixies >> (23-n)) & 1;
    
    //bitStatus=(x==y || x==3); //test with diagonal line

    return bitStatus;
}